[tool.poetry]
name = "attendance-system"
version = "2.0.0"
description = "世界最高レベルのエンタープライズ級iPhone Suica対応勤怠管理システム"
authors = ["Attendance System Team <contact@example.com>"]
readme = "README.md"
homepage = "https://github.com/tsuyoshi-sk/attendance_system"
repository = "https://github.com/tsuyoshi-sk/attendance_system"
documentation = "https://github.com/tsuyoshi-sk/attendance_system/docs"
keywords = ["attendance", "nfc", "pasori", "suica", "fastapi", "enterprise"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: FastAPI",
]

# 新しいsrcレイアウトに対応
packages = [{include = "attendance_system", from = "src"}]

[tool.poetry.scripts]
attendance-server = "attendance_system.app.main:main"

[tool.poetry.dependencies]
python = "^3.9"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
sqlalchemy = "^2.0.23"
alembic = "^1.12.1"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
cryptography = "^41.0.7"
bcrypt = "^4.1.2"
python-multipart = "^0.0.6"
orjson = "^3.9.10"
structlog = "^23.2.0"
psutil = "^5.9.6"
redis = "^5.0.1"
nfcpy = "^1.0.4"
slack-sdk = "^3.26.1"
schedule = "^1.2.1"
pandas = "^2.1.3"
websockets = "^12.0"
aiofiles = "^23.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-timeout = "^2.2.0"
httpx = "^0.25.2"
flake8 = "^6.1.0"
mypy = "^1.7.1"
black = "^23.11.0"
isort = "^5.12.0"
bandit = "^1.7.5"
safety = "^3.0.0"
pre-commit = "^3.6.0"
pylint = "^3.0.3"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-timeout = "^2.2.0"
httpx = "^0.25.2"
faker = "^20.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
  | migrations
  | backend
  | config
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
known_first_party = ["attendance_system"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
mypy_path = "src"
packages = ["attendance_system"]
exclude = [
    "migrations/",
    "venv/",
    ".venv/",
    "backend/",
    "config/",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src/attendance_system",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "--cov-fail-under=80",
]
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["src/attendance_system"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/venv/*",
    "*/.venv/*",
    "backend/*",
    "config/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "backend", "config"]
skips = ["B101"]  # assert_used test

[tool.pylint]
init-hook = 'import sys; sys.path.append("src")'
max-line-length = 88
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0801",  # duplicate-code
    "W0613",  # unused-argument
]

[tool.pylint.MASTER]
ignore-paths = ["backend", "config"]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]