name: Tests

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-timeout
      
      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY_TEST || 'test-secret-key-for-testing-only-must-be-at-least-64-characters-long' }}
          SECRET_KEY: ${{ secrets.SECRET_KEY_TEST || 'test-secret-key-for-testing-only-must-be-at-least-64-characters-long' }}
          ENVIRONMENT: testing
        run: |
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "REDIS_URL=$REDIS_URL" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=$JWT_SECRET_KEY" >> $GITHUB_ENV
          echo "SECRET_KEY=$SECRET_KEY" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
      
      - name: Run database migrations
        run: |
          alembic upgrade head
      
      - name: Run tests with coverage
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY_TEST || 'test-secret-key-for-testing-only-must-be-at-least-64-characters-long' }}
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        run: |
          pytest -v --cov=backend --cov-report=xml --cov-report=html --cov-report=term-missing --timeout=300
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: Python-${{ matrix.python-version }}
          fail_ci_if_error: true